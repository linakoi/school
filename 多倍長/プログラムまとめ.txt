#include stdio.h
#define N 16	 最大桁数 

void inputLongInt( int x[], int n )
{
    char s[N + 3];  改行文字とNULL文字を考慮し3文字分多く確保 
    int len = 0, i;
    fgets(s,sizeof(s),stdin);  キーボードから入力 
    while(s[len] != '0')
    {
        if(s[len] == 'n'  s[len] == 'r')
            s[len]='0';  改行文字は含めない 
        else
            len++;  桁数を数える 
    }
    if( len  n )
        len = n;  先頭のn桁を読み込み対象とする 
    for(i = 0; i  n; i++)
    {
        if(i  n - len)
        {
            x[i] = 0;  0を埋める
        }
        else
        {
            x[i] = (int)(s[i - (n - len)] - '0');
        }
    }
    return;
}

3-1,入力した配列を出力するプログラム
void outputLongInt(int a[],int n) {
    for(int i = 0;i  n;i++) { 配列aをインデックス番号0から順番に出力する
        printf(%d,a[i]);
    }
}

int main() {
    int a[N];
    printf(%d桁までの数字を入力してください,N);
    inputLongInt(a,N);  最大N桁の整数を配列aに入力する 
    outputLongInt(a,N);
    return 0;
}

3-2,多倍長演算で加算をするプログラム
int add(int c[],const int a[],const int b[],int n) {
    int carry = 0;  桁上がりをするときに1にして判定
    for(int i = 1;i = n;i++) {
        c[n-i+1] = a[n-i] + b[n-i];  同じ位のaとbの和をcに代入する
        if(carry == 1) {
            c[n-i+1] += 1; 桁上がりした場合1加算する
        }
        if(c[n-i+1] = 10) { 繰り上がりが起きた場合
            c[n-i+1] %= 10; 十の位を切り捨てる
            carry = 1; 次の位で1を足すためcaryyを1にする
        } else {
            carry = 0;繰り上がりが起きなかった場合は0に
        }
        if(carry == 1 && i == n) {配列cの最上位桁-1の桁(a,bの最上位桁)で繰り上がった場合
            c[0] = 1;ｃの最上位桁を1にする
        } else {
            c[0] = 0; cの最上位桁を0にする
        }
    }
    return carry; 最上位桁の繰り上がり上りがあったかを返す
}


int main() {
    int a[N],b[N],c[N+1] = {0};

    printf(足し算をしますn%d桁までの整数を入力してください,N);
    inputLongInt(a,N);
    outputLongInt(a,N);  最大N桁の整数を配列aに入力する 

    printf(%d桁までの整数を入力してください,N);
    inputLongInt(b,N);
    outputLongInt(b,N);

    int answer = add(c,a,b,N);
    printf(最上位桁の繰り上がり%dn,answer);
    outputLongInt(c,N+1);

    return 0;
}

3-3,多倍長演算で減算をするプログラム
int sub(int c[],const int a[],const int b[],int n) {
    for(int i = 0; i  n; i++) {
        if(a[i]  b[i]) { aとbでbが大きい場合はaとbを入れ替えて計算する
            sub(c,b,a,n); aとbを入れ替えて再起関数を呼び出す
            return -1; 符号1を返し終了する
        } else if( a[i]  b[i]) {
            int carry = 0; 桁下がりしたとき1にして判定
            for(int j = n-1;j = 0;j--) {
                if(a[j] - carry = b[j]) {繰り下がりが起きない場合
                    c[j] = a[j] - carry - b[j];同じ位のaとbの差をcに代入する
                    carry = 0;
                } else { 繰り下がりが起きる場合
                    c[j] = (a[j] - carry + 10) - b[j];
                    carry = 1;
                }
            }
            return 1; 符号1を返し終了する
        }
    }
    return 0; 最後までaとbのさがつかなかった場合は符号0を返し終了する
}

int main() {
    int a[N],b[N],c[N] = {0};

    printf(引き算をしますn%d桁までの整数を入力してください,N);
    inputLongInt(a,N);
    outputLongInt(a,N);  最大N桁の整数を配列aに入力する

    printf(d桁までの整数を入力してください,N);
    inputLongInt(b,N);
    outputLongInt(b,N);

    int answer = sub(c,a,b,N);
    printf(符号%dn,answer);
    outputLongInt(c,N);
}

3-4,多倍長演算で除算をするプログラム
int div(int c[],const int a[],int b,int n){
    int rem = 0; あまりです
    for(int i = 0;i  n;i++) {
        c[i] = (rem10 + a[i])b; (これまでのあまり+a[i]の値)b
        rem = (rem10 + a[i])%b; あまりを更新
    }
    return rem; 余りを返す
}
int main()
{
    int a[N],b,c[N] = {0};

    printf(割り算をしますn16桁までの割られる数を入力してください);
    inputLongInt(a,N);
    outputLongInt(a,N);  最大N桁の整数を配列aに入力する

    printf(16桁までの割る数を入力してください);
    scanf(%d,&b);

    int answer = div(c,a,b,N);
    printf(余り%dn,answer);
    outputLongInt(c,N);
}

4,多倍長演算での減算をcmpとsub2に分けるプログラム

int cmp(const int a[],const int b[],int n) { a,bの大小を判定する関数
    for(int i = 0; i  n; i++) {
        if(a[i]  b[i]) { abの場合
            return -1;
        } else if( a[i]  b[i]) { abの場合
            return 1;
        }
    }
    return 0; a,bが同じ場合
}

void sub2(int c[],const int a[],const int b[],int n) {
    int carry = 0; 桁下がりしたとき1にして判定
    for(int j = n - 1; j = 0; j--) {
        if(a[j] - carry = b[j]) {
            c[j] = a[j] - carry - b[j];同じ位のaとbの差をcに代入する
            carry = 0;
        } else {
            c[j] = (a[j] - carry + 10) - b[j];
            carry = 1;
        }
    }
}

int sub(int c[],const int a[],const int b[],int n) { cmpとsub2を呼び出し引き算をする関数
    switch(cmp(a,b,n)) {
    case 0
        return 0;
    case 1
        sub2(c,a,b,n);
        return 1;
    case -1
        sub2(c,b,a,n);
        return -1;
    }
}

int main() {
    int a[N],b[N],c[N] = {0};

    inputLongInt(a,N);
    outputLongInt(a,N);  最大N桁の整数を配列aに入力する

    inputLongInt(b,N);
    outputLongInt(b,N);

    int answer = sub(c,a,b,N);
    printf(符号%dn,answer);
    outputLongInt(c,N);
}

